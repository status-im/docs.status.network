"use strict";(self.webpackChunkstatus_network_docs=self.webpackChunkstatus_network_docs||[]).push([[584],{6001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var r=n(4848),s=n(8453);const o={},i="Using Foundry to Deploy Smart Contracts",l={id:"tutorials/deploying-contracts/using-foundry",title:"Using Foundry to Deploy Smart Contracts",description:"This tutorial will guide you through the process of deploying a smart contract on Status Network testnet using Foundry.",source:"@site/docs/tutorials/deploying-contracts/using-foundry.md",sourceDirName:"tutorials/deploying-contracts",slug:"/tutorials/deploying-contracts/using-foundry",permalink:"/tutorials/deploying-contracts/using-foundry",draft:!1,unlisted:!1,editUrl:"https://github.com/status-im/status-network-docs/tree/main/docs/tutorials/deploying-contracts/using-foundry.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udfa9 Using Hardhat",permalink:"/tutorials/deploying-contracts/using-hardhat"},next:{title:"\ud83c\udf9b\ufe0f Using Remix",permalink:"/tutorials/deploying-contracts/using-remix"}},c={},a=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"What You&#39;ll Accomplish",id:"what-youll-accomplish",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Initialize a Foundry Project",id:"1-initialize-a-foundry-project",level:3},{value:"2. Writing the Smart Contract",id:"2-writing-the-smart-contract",level:3},{value:"3. Configure Foundry for Status Network",id:"3-configure-foundry-for-status-network",level:3},{value:"4. Deploy the Contract",id:"4-deploy-the-contract",level:3},{value:"5. Interact with the Contract",id:"5-interact-with-the-contract",level:3},{value:"6. Cast Commands for Quick Interactions",id:"6-cast-commands-for-quick-interactions",level:3},{value:"7. Testing",id:"7-testing",level:3},{value:"Support",id:"support",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"using-foundry-to-deploy-smart-contracts",children:"Using Foundry to Deploy Smart Contracts"})}),"\n",(0,r.jsx)(t.p,{children:"This tutorial will guide you through the process of deploying a smart contract on Status Network testnet using Foundry."}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(t.p,{children:"Before you begin, ensure you have the following:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Foundry"}),": Install from the ",(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/getting-started/installation",children:"official Foundry book"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Ethereum Wallet"}),": A private key for Status Network testnet"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Testnet ETH"}),": You'll need Status Network testnet ETH","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Get Status Network testnet ETH from our ",(0,r.jsx)(t.a,{href:"/tools/testnet-faucets",children:"Faucet"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Basic Knowledge"}),": Familiarity with Solidity and command line"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"what-youll-accomplish",children:"What You'll Accomplish"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Initialize a Foundry project"}),"\n",(0,r.jsx)(t.li,{children:"Write a basic Ethereum smart contract"}),"\n",(0,r.jsx)(t.li,{children:"Configure Foundry for Status Network testnet deployment"}),"\n",(0,r.jsx)(t.li,{children:"Deploy your smart contract"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsx)(t.h3,{id:"1-initialize-a-foundry-project",children:"1. Initialize a Foundry Project"}),"\n",(0,r.jsx)(t.p,{children:"First, create a new Foundry project:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Create a new project\nforge init hello_status\ncd hello_status\n\n# Create .env file for private key\ntouch .env\necho "PRIVATE_KEY=your_private_key_here" >> .env\n'})}),"\n",(0,r.jsx)(t.h3,{id:"2-writing-the-smart-contract",children:"2. Writing the Smart Contract"}),"\n",(0,r.jsxs)(t.p,{children:["Replace ",(0,r.jsx)(t.code,{children:"src/Counter.sol"})," with our ",(0,r.jsx)(t.code,{children:"HelloWorld.sol"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract HelloWorld {\n    string public greet = "Hello, Status Network!";\n\n    function setGreet(string memory _greet) public {\n        greet = _greet;\n    }\n\n    function getGreet() public view returns (string memory) {\n        return greet;\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"3-configure-foundry-for-status-network",children:"3. Configure Foundry for Status Network"}),"\n",(0,r.jsxs)(t.p,{children:["Create or update ",(0,r.jsx)(t.code,{children:"foundry.toml"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",children:'[profile.default]\nsrc = "src"\nout = "out"\nlibs = ["lib"]\nsolc = "0.8.24"\n\n[rpc_endpoints]\nstatus_testnet = "https://public.sepolia.rpc.status.network"\n'})}),"\n",(0,r.jsx)(t.h3,{id:"4-deploy-the-contract",children:"4. Deploy the Contract"}),"\n",(0,r.jsxs)(t.p,{children:["Create a deployment script ",(0,r.jsx)(t.code,{children:"script/Deploy.s.sol"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport "forge-std/Script.sol";\nimport "../src/HelloWorld.sol";\n\ncontract DeployScript is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");\n        \n        vm.startBroadcast(deployerPrivateKey);\n        \n        HelloWorld hello = new HelloWorld();\n        console.log("HelloWorld deployed to:", address(hello));\n        \n        vm.stopBroadcast();\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Deploy using forge:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Load environment variables\nsource .env\n\n# Deploy to Status Network testnet\nforge script script/Deploy.s.sol:DeployScript \\\n    --rpc-url https://public.sepolia.rpc.status.network \\\n    --broadcast \\\n"})}),"\n",(0,r.jsx)(t.h3,{id:"5-interact-with-the-contract",children:"5. Interact with the Contract"}),"\n",(0,r.jsxs)(t.p,{children:["Create a script to interact with your contract ",(0,r.jsx)(t.code,{children:"script/Interact.s.sol"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport "forge-std/Script.sol";\nimport "../src/HelloWorld.sol";\n\ncontract InteractScript is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");\n        address contractAddress = address(0x...); // Replace with your contract address\n        \n        vm.startBroadcast(deployerPrivateKey);\n        \n        HelloWorld hello = HelloWorld(contractAddress);\n        \n        // Read current greeting\n        string memory currentGreeting = hello.getGreet();\n        console.log("Current greeting:", currentGreeting);\n        \n        // Update greeting\n        hello.setGreet("Hello from Foundry!");\n        \n        vm.stopBroadcast();\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Run the interaction script:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge script script/Interact.s.sol:InteractScript \\\n    --rpc-url https://public.sepolia.rpc.status.network \\\n    --broadcast\n"})}),"\n",(0,r.jsx)(t.h3,{id:"6-cast-commands-for-quick-interactions",children:"6. Cast Commands for Quick Interactions"}),"\n",(0,r.jsxs)(t.p,{children:["You can also use ",(0,r.jsx)(t.code,{children:"cast"})," to interact with your contract:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Read the greeting\ncast call <CONTRACT_ADDRESS> "getGreet()" \\\n    --rpc-url https://public.sepolia.rpc.status.network\n\n# Set a new greeting\ncast send <CONTRACT_ADDRESS> "setGreet(string)" "New greeting!" \\\n    --private-key $PRIVATE_KEY \\\n    --rpc-url https://public.sepolia.rpc.status.network\n'})}),"\n",(0,r.jsx)(t.h3,{id:"7-testing",children:"7. Testing"}),"\n",(0,r.jsxs)(t.p,{children:["Create a test file ",(0,r.jsx)(t.code,{children:"test/HelloWorld.t.sol"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport "forge-std/Test.sol";\nimport "../src/HelloWorld.sol";\n\ncontract HelloWorldTest is Test {\n    HelloWorld hello;\n\n    function setUp() public {\n        hello = new HelloWorld();\n    }\n\n    function testGreeting() public {\n        assertEq(hello.getGreet(), "Hello, Status Network!");\n        \n        hello.setGreet("New greeting");\n        assertEq(hello.getGreet(), "New greeting");\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Run the tests:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge test\n"})}),"\n",(0,r.jsx)(t.h2,{id:"support",children:"Support"}),"\n",(0,r.jsx)(t.p,{children:"If you encounter any issues:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Join our ",(0,r.jsx)(t.a,{href:"https://t.me/+k04A_OZbhIs1Mzc9",children:"Telegram Community"})]}),"\n",(0,r.jsxs)(t.li,{children:["Check ",(0,r.jsx)(t.a,{href:"https://health.status.network",children:"Network Status"})]}),"\n",(0,r.jsxs)(t.li,{children:["View our ",(0,r.jsx)(t.a,{href:"/general-info/network-details",children:"Network Details"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/",children:"Foundry Book"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://sepoliascan.status.network",children:"Status Network Explorer"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);